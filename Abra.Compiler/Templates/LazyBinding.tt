<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="cls" type="Abra.Compiler.Generators.LazyBindingGenerator" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Abra.Compiler" #>
<#@ import namespace="Abra.Compiler.Generators" #>
<#@ output extension=".cs" #>

namespace <#= cls.ProvidedTypeNamespace #>
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    <#= cls.AccessModifier #> class <#= GeneratorBase.BindingName(cls.GeneratedClassName) #> : Binding
    {
        private readonly string lazyKey;
        private Binding delegateBinding;

        public <#= GeneratorBase.BindingName(cls.GeneratedClassName) #>(string key, object requiredBy, string lazyKey)
            : base(key, null, false, requiredBy)
        {
            this.lazyKey = lazyKey;
        }

        public override void Resolve(Resolver resolver)
        {
            delegateBinding = resolver.RequestBinding(lazyKey, RequiredBy);
        }

        public override object Get()
        {
            return new global::System.Lazy<<#= cls.ProvidedTypeFullName #>>(() => (<#= cls.ProvidedTypeFullName #>) delegateBinding.Get());
        }

        public override void InjectProperties(object obj)
        {
            throw new NotSupportedException("Lazy bindings do not support property injection.");
        }
    }
}