<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="mod" type="Abra.Compiler.Generators.ModuleGenerator" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Abra.Compiler" #>
<#@ output extension=".cs" #>

namespace <#= mod.Namespace #>
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class <#= BindingName(mod.LiteralName) #>_CompiledModule : RuntimeModule
    {
        public <#= BindingName(mod.LiteralName) #>_CompiledModule()
            : base(typeof(<#= mod.FullName #>),
                   new string[] { <#= string.Join(", ", Quote(mod.EntryPointKeys)) #> },
                   new Type[] { <#= string.Join(", ", mod.IncludedTypeofs) #> },
                   <#= mod.IsComplete ? "true" : "false" #>)
        {}

        public override object CreateModule()
        {
            return new <#= mod.LiteralName #>();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
<# foreach (var prov in mod.ProviderMethods) { #>
            bindings["<#= prov.Key #>"] = new <#= prov.BindingName #>((<#= mod.LiteralName #>) Module);
<# } #>
        }

<# foreach (var prov in mod.ProviderMethods) { #>

        private class <#= prov.BindingName #> : Binding
        {
            private readonly <#= mod.LiteralName #> module;
<# foreach (var param in prov.Params) { #>
            private Binding <#= param.Name #>;
<# } #>

            public <#= prov.BindingName #>(<#= mod.LiteralName #> module)
                : base("<#= prov.Key #>", null, <#= prov.IsSingleton ? "true" : "false" #>, typeof(<#= mod.FullName #>))
            {
                this.module = module;
            }
<# if (prov.HasParams) { #>

            public override void Resolve(Resolver resolver)
            {
<# foreach (var param in prov.Params) { #>
                <#= param.Name #> = resolver.RequestBinding("<#= param.Key #>", typeof(<#= mod.LiteralName #>));
<# } #>
            }

            public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propertyDependencies)
            {
<# foreach (var param in prov.Params) { #>
                injectDependencies.Add(<#= param.Name #>);
<# } #>
            }
<# } #>

            public override object Get()
            {
<# if (prov.HasParams) { #>
                return module.<#= prov.Name #>(
<# for (var i = 0; i < prov.Params.Count; ++i) { #>
                    (<#= prov.Params[i].TypeName #>) <#= prov.Params[i].Name #>.Get()<#= i < prov.Params.Count - 1 ? "," : ");" #>
<# } #>
<# } else { #>
                return module.<#= prov.Name #>();
<# } #>
            }
        }
<# } // end of provider-binding classes #>
    }
}<#+
private IEnumerable<string> Quote(IEnumerable<string> strs)
{
    foreach (var str in strs) {
        yield return "\"" + str + "\"";
    }
}

private string BindingName(string name)
{
    return name.Replace(".", "_");
}
#>
