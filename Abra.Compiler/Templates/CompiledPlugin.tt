<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="cls" type="Abra.Compiler.Generators.PluginGenerator" #>
<#@ assembly name="Abra" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Abra.Compiler" #>
<#@ output extension=".cs" #>

namespace <#= cls.RootNamespace #>
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;
    using IPlugin = global::Abra.Internal.IPlugin;

    public class <#= cls.GeneratedClassName #> : IPlugin
    {
        private delegate Binding LazyBindingCtor(string key, object requiredBy, string lazyKey);
        private delegate Binding ProvidesBindingCtor(string key, object requiredBy, bool mustBeInjectable, string providesKey);

        private readonly IDictionary<string, Func<RuntimeModule>> modules = new Dictionary<string, Func<RuntimeModule>>(StringComparer.Ordinal);
        private readonly IDictionary<string, Func<Binding>> injectBindings = new Dictionary<string, Func<Binding>>(StringComparer.Ordinal);
        private readonly IDictionary<string, LazyBindingCtor> lazyBindings = new Dictionary<string, LazyBindingCtor>(StringComparer.Ordinal);
        private readonly IDictionary<string, ProvidesBindingCtor> providesBindings = new Dictionary<string, ProvidesBindingCtor>(StringComparer.Ordinal);

        public <#= cls.GeneratedClassName #>()
        {
<# foreach (var module in cls.Modules) { #>
            modules["<#= module.Key #>"] = () => new <#= module.ClassName #>();
<# } #>
<# foreach (var injectBinding in cls.InjectBindings) { #>
            injectBindings["<#= injectBinding.Key #>"] = () => new <#= injectBinding.ClassName #>();
<# } #>

<# foreach (var lazyBinding in cls.LazyBindings) { #>
            lazyBindings["<#= lazyBinding.Key #>"] = (k, r, l) => new <#= lazyBinding.ClassName #>(k, r, l);
<# } #>

<# foreach (var providesBinding in cls.ProvidesBindings) { #>
            providesBindings["<#= providesBinding.Key #>"] = (k, r, m, p) => new <#= providesBinding.ClassName #>(k, r, m, p);
<# } #>
        }

        public Binding GetInjectBinding(string key, string className, bool mustBeInjectable)
        {
            var ctor = injectBindings[key];
            return ctor();
        }

        public Binding GetLazyInjectBinding(string key, object requiredBy, string lazyKey)
        {
            var ctor = lazyBindings[key];
            return ctor(key, requiredBy, lazyKey);
        }

        public Binding GetIProviderInjectBinding(string key, object requiredBy, bool mustBeInjectable, string providerKey)
        {
            var ctor = providesBindings[providerKey];
            return ctor(key, requiredBy, mustBeInjectable, providerKey);
        }

        public RuntimeModule GetRuntimeModule(Type moduleType, object moduleInstance)
        {
            var ctor = modules[moduleType.FullName];
            return ctor();
        }
    }
}