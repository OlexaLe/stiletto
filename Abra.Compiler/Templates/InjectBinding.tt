<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="cls" type="Abra.Compiler.Generators.InjectBindingGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Abra.Compiler" #>
<#@ output extension=".cs" #>

namespace <#= cls.Namespace #>
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="<#= cls.FullName #>"/>.
    /// </summary>
<# if (cls.IsEntryPoint) { #>
    /// <remarks>
    /// <#= cls.LiteralName #> is an entry point binding.
    /// </remarks>
<# } #>
    <#= cls.AccessModifier #> class <#= BindingName(cls.LiteralName) #>_CompiledBinding : Binding
    {
<# if (cls.InjectableProperties.Count > 0) { #>
        // Property bindings
<# foreach (var prop in cls.InjectableProperties) { #>
        private Binding <#= prop.Name #>;
<# } #>
<# } #>
<# if (cls.BaseTypeKey != null) { #>
        private Binding baseTypeBinding;
<# } #>
<# if (cls.CtorParameters.Count != 0) { #>
        // Constructor bindings
        private Binding[] ctorParameterBindings = new Binding[<#= cls.CtorParameters.Count #>];
<# } #>

        public <#= BindingName(cls.LiteralName) #>_CompiledBinding()
            : base("<#= cls.Key #>", "<#= cls.MemberKey #>", <#= cls.IsSingleton ? "true" : "false" #>, "<#= cls.Type.ReflectionName #>")
        {
        }

        public override void Resolve(Resolver resolver)
        {
<# foreach (var prop in cls.InjectableProperties) { #>
            <#= prop.Name #> = resolver.RequestBinding("<#= prop.Key #>", "<#= prop.Name #>");
<# } #>
<# for (var i = 0; i < cls.CtorParameters.Count; ++i) { #>
            ctorParameterBindings[<#= i #>] = resolver.RequestBinding("<#= cls.CtorParameters[i].Key #>", "<#= cls.InjectableConstructor.FullName #>");
<# } #>
<# if (cls.BaseTypeKey != null) { #>
            baseTypeBinding = resolver.RequestBinding("<#= cls.BaseTypeKey #>", this, false);
<# } #>
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
<# if (cls.CtorParameters.Count != 0) { #>
            injectDependencies.UnionWith(ctorParameterBindings);
<# } #>
<# foreach (var prop in cls.InjectableProperties) { #>
            propDependencies.Add(<#= prop.Name #>);
<# } #>
<# if (cls.BaseTypeKey != null) { #>
            propDependencies.Add(baseTypeBinding);
<# } #>
        }

        public override object Get()
        {
<# if (cls.CtorParameters.Count == 0) { #>
            var obj = new <#= cls.FullName #>();
<# } else { #>
            var obj = new <#= cls.FullName #>(
<# for (var i = 0; i < cls.CtorParameters.Count; ++i) { #>
                (<#= cls.CtorParameters[i].TypeName #>) ctorParameterBindings[<#= i #>].Get() <#= i == cls.CtorParameters.Count - 1 ? ");" : "," #>
<# } //foreach #>
<# } //if #>
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
<# if (cls.InjectableProperties.Count > 0) { #>
            var toInject = (<#= cls.FullName #>) obj;
<# foreach (var prop in cls.InjectableProperties) { #>
            toInject.<#= prop.Name #> = (<#= prop.TypeName #>) <#= prop.Name #>.Get();
<# } //foreach #>
<# } //if #>
<# if (cls.BaseTypeKey != null) { #>
            baseTypeBinding.InjectProperties(obj);
<# } #>
        }
    }
}
<#+
protected string BindingName(string id)
{
    return id.Replace(".", "_");
}
#>