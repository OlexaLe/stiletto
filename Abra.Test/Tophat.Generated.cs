///////////////
// Generated by TopHat - do not modify directly.
//

using System;
using System.Collections.Generic;

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class LazyInjectionTests_NonLazyModule_CompiledModule : RuntimeModule
    {
        public LazyInjectionTests_NonLazyModule_CompiledModule()
            : base(typeof(Abra.Test.LazyInjectionTests.NonLazyModule),
                   new string[] { "members/Abra.Test.LazyInjectionTests+NeedsAnExpensiveObject" },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new LazyInjectionTests.NonLazyModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.String"] = new SomeExpensiveObject0((LazyInjectionTests.NonLazyModule) Module);
        }


        private class SomeExpensiveObject0 : Binding
        {
            private readonly LazyInjectionTests.NonLazyModule module;

            public SomeExpensiveObject0(LazyInjectionTests.NonLazyModule module)
                : base("System.String", null, false, typeof(Abra.Test.LazyInjectionTests.NonLazyModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.SomeExpensiveObject();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class ProviderInjectionTests_TestModule_CompiledModule : RuntimeModule
    {
        public ProviderInjectionTests_TestModule_CompiledModule()
            : base(typeof(Abra.Test.ProviderInjectionTests.TestModule),
                   new string[] { "members/Abra.Test.ProviderInjectionTests+NeedsProvider" },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new ProviderInjectionTests.TestModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.String"] = new SomeObject0((ProviderInjectionTests.TestModule) Module);
        }


        private class SomeObject0 : Binding
        {
            private readonly ProviderInjectionTests.TestModule module;

            public SomeObject0(ProviderInjectionTests.TestModule module)
                : base("System.String", null, false, typeof(Abra.Test.ProviderInjectionTests.TestModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.SomeObject();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_TestModule_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_TestModule_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.TestModule),
                   new string[] { "members/System.Object" },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.TestModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.Object"] = new ProvideFoo0((RudimentaryInjectionTest.TestModule) Module);
        }


        private class ProvideFoo0 : Binding
        {
            private readonly RudimentaryInjectionTest.TestModule module;

            public ProvideFoo0(RudimentaryInjectionTest.TestModule module)
                : base("System.Object", null, false, typeof(Abra.Test.RudimentaryInjectionTest.TestModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.ProvideFoo();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_TestSingletonProviderModule_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_TestSingletonProviderModule_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.TestSingletonProviderModule),
                   new string[] { "members/Abra.Test.RudimentaryInjectionTest+SingletonTestEntryPoint", "members/Abra.Test.RudimentaryInjectionTest+NonSingletonTestEntryPoint" },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.TestSingletonProviderModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["@n/System.Object"] = new NewEveryTime0n((RudimentaryInjectionTest.TestSingletonProviderModule) Module);
            bindings["@s/System.Object"] = new Singleton0s((RudimentaryInjectionTest.TestSingletonProviderModule) Module);
        }


        private class NewEveryTime0n : Binding
        {
            private readonly RudimentaryInjectionTest.TestSingletonProviderModule module;

            public NewEveryTime0n(RudimentaryInjectionTest.TestSingletonProviderModule module)
                : base("@n/System.Object", null, false, typeof(Abra.Test.RudimentaryInjectionTest.TestSingletonProviderModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.NewEveryTime();
            }
        }

        private class Singleton0s : Binding
        {
            private readonly RudimentaryInjectionTest.TestSingletonProviderModule module;

            public Singleton0s(RudimentaryInjectionTest.TestSingletonProviderModule module)
                : base("@s/System.Object", null, true, typeof(Abra.Test.RudimentaryInjectionTest.TestSingletonProviderModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.Singleton();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_TestNamedModule_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_TestNamedModule_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule),
                   new string[] { "members/Abra.Test.RudimentaryInjectionTest+Dude" },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.TestNamedModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["@bar/System.DateTime"] = new GetBar0bar((RudimentaryInjectionTest.TestNamedModule) Module);
            bindings["System.DateTime"] = new GetSomeOtherDate0((RudimentaryInjectionTest.TestNamedModule) Module);
            bindings["System.Collections.Generic.IList`1<System.String>"] = new Activities0((RudimentaryInjectionTest.TestNamedModule) Module);
        }


        private class GetBar0bar : Binding
        {
            private readonly RudimentaryInjectionTest.TestNamedModule module;

            public GetBar0bar(RudimentaryInjectionTest.TestNamedModule module)
                : base("@bar/System.DateTime", null, false, typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.GetBar();
            }
        }

        private class GetSomeOtherDate0 : Binding
        {
            private readonly RudimentaryInjectionTest.TestNamedModule module;

            public GetSomeOtherDate0(RudimentaryInjectionTest.TestNamedModule module)
                : base("System.DateTime", null, false, typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.GetSomeOtherDate();
            }
        }

        private class Activities0 : Binding
        {
            private readonly RudimentaryInjectionTest.TestNamedModule module;

            public Activities0(RudimentaryInjectionTest.TestNamedModule module)
                : base("System.Collections.Generic.IList`1<System.String>", null, false, typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.Activities();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_ArrayModule_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_ArrayModule_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.ArrayModule),
                   new string[] {  },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.ArrayModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.Object[,]"] = new ProvidesStringArray0((RudimentaryInjectionTest.ArrayModule) Module);
        }


        private class ProvidesStringArray0 : Binding
        {
            private readonly RudimentaryInjectionTest.ArrayModule module;

            public ProvidesStringArray0(RudimentaryInjectionTest.ArrayModule module)
                : base("System.Object[,]", null, false, typeof(Abra.Test.RudimentaryInjectionTest.ArrayModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.ProvidesStringArray();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_TestIncludedModules_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_TestIncludedModules_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.TestIncludedModules),
                   new string[] {  },
                   new Type[] { typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule) },
                   false)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.TestIncludedModules();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
        }

    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class RudimentaryInjectionTest_NameModule_CompiledModule : RuntimeModule
    {
        public RudimentaryInjectionTest_NameModule_CompiledModule()
            : base(typeof(Abra.Test.RudimentaryInjectionTest.NameModule),
                   new string[] { "members/Abra.Test.RudimentaryInjectionTest+DerivedInjectable" },
                   new Type[] { typeof(Abra.Test.RudimentaryInjectionTest.TestNamedModule) },
                   false)
        {}

        public override object CreateModule()
        {
            return new RudimentaryInjectionTest.NameModule();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.String"] = new GetName0((RudimentaryInjectionTest.NameModule) Module);
        }


        private class GetName0 : Binding
        {
            private readonly RudimentaryInjectionTest.NameModule module;

            public GetName0(RudimentaryInjectionTest.NameModule module)
                : base("System.String", null, false, typeof(Abra.Test.RudimentaryInjectionTest.NameModule))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.GetName();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class ValidatorTests_BadModuleOne_CompiledModule : RuntimeModule
    {
        public ValidatorTests_BadModuleOne_CompiledModule()
            : base(typeof(Abra.Test.ValidatorTests.BadModuleOne),
                   new string[] {  },
                   new Type[] {  },
                   false)
        {}

        public override object CreateModule()
        {
            return new ValidatorTests.BadModuleOne();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.String"] = new Foo1((ValidatorTests.BadModuleOne) Module);
        }


        private class Foo1 : Binding
        {
            private readonly ValidatorTests.BadModuleOne module;
            private Binding i;

            public Foo1(ValidatorTests.BadModuleOne module)
                : base("System.String", null, false, typeof(Abra.Test.ValidatorTests.BadModuleOne))
            {
                this.module = module;
            }

            public override void Resolve(Resolver resolver)
            {
                i = resolver.RequestBinding("System.Int32", typeof(ValidatorTests.BadModuleOne));
            }

            public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propertyDependencies)
            {
                injectDependencies.Add(i);
            }

            public override object Get()
            {
                return module.Foo(
                    (Int32) i.Get());
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class ValidatorTests_BadModuleTwo_CompiledModule : RuntimeModule
    {
        public ValidatorTests_BadModuleTwo_CompiledModule()
            : base(typeof(Abra.Test.ValidatorTests.BadModuleTwo),
                   new string[] {  },
                   new Type[] {  },
                   false)
        {}

        public override object CreateModule()
        {
            return new ValidatorTests.BadModuleTwo();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.Int32"] = new Bar1((ValidatorTests.BadModuleTwo) Module);
        }


        private class Bar1 : Binding
        {
            private readonly ValidatorTests.BadModuleTwo module;
            private Binding s;

            public Bar1(ValidatorTests.BadModuleTwo module)
                : base("System.Int32", null, false, typeof(Abra.Test.ValidatorTests.BadModuleTwo))
            {
                this.module = module;
            }

            public override void Resolve(Resolver resolver)
            {
                s = resolver.RequestBinding("System.String", typeof(ValidatorTests.BadModuleTwo));
            }

            public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propertyDependencies)
            {
                injectDependencies.Add(s);
            }

            public override object Get()
            {
                return module.Bar(
                    (String) s.Get());
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class ValidatorTests_GoodModuleOne_CompiledModule : RuntimeModule
    {
        public ValidatorTests_GoodModuleOne_CompiledModule()
            : base(typeof(Abra.Test.ValidatorTests.GoodModuleOne),
                   new string[] {  },
                   new Type[] {  },
                   false)
        {}

        public override object CreateModule()
        {
            return new ValidatorTests.GoodModuleOne();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.String"] = new Foo1((ValidatorTests.GoodModuleOne) Module);
        }


        private class Foo1 : Binding
        {
            private readonly ValidatorTests.GoodModuleOne module;
            private Binding i;

            public Foo1(ValidatorTests.GoodModuleOne module)
                : base("System.String", null, false, typeof(Abra.Test.ValidatorTests.GoodModuleOne))
            {
                this.module = module;
            }

            public override void Resolve(Resolver resolver)
            {
                i = resolver.RequestBinding("System.Int32", typeof(ValidatorTests.GoodModuleOne));
            }

            public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propertyDependencies)
            {
                injectDependencies.Add(i);
            }

            public override object Get()
            {
                return module.Foo(
                    (Int32) i.Get());
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;
    using RuntimeModule = global::Abra.Internal.RuntimeModule;

    public class ValidatorTests_GoodModuleTwo_CompiledModule : RuntimeModule
    {
        public ValidatorTests_GoodModuleTwo_CompiledModule()
            : base(typeof(Abra.Test.ValidatorTests.GoodModuleTwo),
                   new string[] {  },
                   new Type[] {  },
                   true)
        {}

        public override object CreateModule()
        {
            return new ValidatorTests.GoodModuleTwo();
        }

        public override void GetBindings(IDictionary<string, Binding> bindings)
        {
            bindings["System.Int32"] = new Bar0((ValidatorTests.GoodModuleTwo) Module);
        }


        private class Bar0 : Binding
        {
            private readonly ValidatorTests.GoodModuleTwo module;

            public Bar0(ValidatorTests.GoodModuleTwo module)
                : base("System.Int32", null, false, typeof(Abra.Test.ValidatorTests.GoodModuleTwo))
            {
                this.module = module;
            }

            public override object Get()
            {
                return module.Bar();
            }
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.LazyInjectionTests.NeedsAnExpensiveObject"/>.
    /// </summary>
    /// <remarks>
    /// LazyInjectionTests.NeedsAnExpensiveObject is an entry point binding.
    /// </remarks>
    public class LazyInjectionTests_NeedsAnExpensiveObject_CompiledBinding : Binding
    {
        // Constructor bindings
        private Binding[] ctorParameterBindings = new Binding[1];

        public LazyInjectionTests_NeedsAnExpensiveObject_CompiledBinding()
            : base("Abra.Test.LazyInjectionTests+NeedsAnExpensiveObject", "members/Abra.Test.LazyInjectionTests+NeedsAnExpensiveObject", false, "Abra.Test.LazyInjectionTests+NeedsAnExpensiveObject")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            ctorParameterBindings[0] = resolver.RequestBinding("System.Lazy`1<System.String>", "Abra.Test.LazyInjectionTests.NeedsAnExpensiveObject..ctor");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            injectDependencies.UnionWith(ctorParameterBindings);
        }

        public override object Get()
        {
            var obj = new Abra.Test.LazyInjectionTests.NeedsAnExpensiveObject(
                (System.Lazy<System.String>) ctorParameterBindings[0].Get() );
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.ProviderInjectionTests.NeedsProvider"/>.
    /// </summary>
    /// <remarks>
    /// ProviderInjectionTests.NeedsProvider is an entry point binding.
    /// </remarks>
    public class ProviderInjectionTests_NeedsProvider_CompiledBinding : Binding
    {
        // Property bindings
        private Binding ObjectProvider;

        public ProviderInjectionTests_NeedsProvider_CompiledBinding()
            : base("Abra.Test.ProviderInjectionTests+NeedsProvider", "members/Abra.Test.ProviderInjectionTests+NeedsProvider", false, "Abra.Test.ProviderInjectionTests+NeedsProvider")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            ObjectProvider = resolver.RequestBinding("Abra.IProvider`1<System.String>", "ObjectProvider");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            propDependencies.Add(ObjectProvider);
        }

        public override object Get()
        {
            var obj = new Abra.Test.ProviderInjectionTests.NeedsProvider();
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            var toInject = (Abra.Test.ProviderInjectionTests.NeedsProvider) obj;
            toInject.ObjectProvider = (Abra.IProvider<System.String>) ObjectProvider.Get();
        }
    }
}

namespace System
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="System.Object"/>.
    /// </summary>
    /// <remarks>
    /// Object is an entry point binding.
    /// </remarks>
    public class Object_CompiledBinding : Binding
    {

        public Object_CompiledBinding()
            : base("System.Object", "members/System.Object", false, "System.Object")
        {
        }

        public override void Resolve(Resolver resolver)
        {
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
        }

        public override object Get()
        {
            var obj = new System.Object();
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.RudimentaryInjectionTest.SingletonTestEntryPoint"/>.
    /// </summary>
    /// <remarks>
    /// RudimentaryInjectionTest.SingletonTestEntryPoint is an entry point binding.
    /// </remarks>
    public class RudimentaryInjectionTest_SingletonTestEntryPoint_CompiledBinding : Binding
    {
        // Property bindings
        private Binding One;
        private Binding Another;

        public RudimentaryInjectionTest_SingletonTestEntryPoint_CompiledBinding()
            : base("Abra.Test.RudimentaryInjectionTest+SingletonTestEntryPoint", "members/Abra.Test.RudimentaryInjectionTest+SingletonTestEntryPoint", false, "Abra.Test.RudimentaryInjectionTest+SingletonTestEntryPoint")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            One = resolver.RequestBinding("@s/System.Object", "One");
            Another = resolver.RequestBinding("@s/System.Object", "Another");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            propDependencies.Add(One);
            propDependencies.Add(Another);
        }

        public override object Get()
        {
            var obj = new Abra.Test.RudimentaryInjectionTest.SingletonTestEntryPoint();
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            var toInject = (Abra.Test.RudimentaryInjectionTest.SingletonTestEntryPoint) obj;
            toInject.One = (System.Object) One.Get();
            toInject.Another = (System.Object) Another.Get();
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.RudimentaryInjectionTest.NonSingletonTestEntryPoint"/>.
    /// </summary>
    /// <remarks>
    /// RudimentaryInjectionTest.NonSingletonTestEntryPoint is an entry point binding.
    /// </remarks>
    public class RudimentaryInjectionTest_NonSingletonTestEntryPoint_CompiledBinding : Binding
    {
        // Property bindings
        private Binding One;
        private Binding Another;

        public RudimentaryInjectionTest_NonSingletonTestEntryPoint_CompiledBinding()
            : base("Abra.Test.RudimentaryInjectionTest+NonSingletonTestEntryPoint", "members/Abra.Test.RudimentaryInjectionTest+NonSingletonTestEntryPoint", false, "Abra.Test.RudimentaryInjectionTest+NonSingletonTestEntryPoint")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            One = resolver.RequestBinding("@n/System.Object", "One");
            Another = resolver.RequestBinding("@n/System.Object", "Another");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            propDependencies.Add(One);
            propDependencies.Add(Another);
        }

        public override object Get()
        {
            var obj = new Abra.Test.RudimentaryInjectionTest.NonSingletonTestEntryPoint();
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            var toInject = (Abra.Test.RudimentaryInjectionTest.NonSingletonTestEntryPoint) obj;
            toInject.One = (System.Object) One.Get();
            toInject.Another = (System.Object) Another.Get();
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.RudimentaryInjectionTest.Dude"/>.
    /// </summary>
    /// <remarks>
    /// RudimentaryInjectionTest.Dude is an entry point binding.
    /// </remarks>
    public class RudimentaryInjectionTest_Dude_CompiledBinding : Binding
    {
        // Property bindings
        private Binding Birthday;
        // Constructor bindings
        private Binding[] ctorParameterBindings = new Binding[1];

        public RudimentaryInjectionTest_Dude_CompiledBinding()
            : base("Abra.Test.RudimentaryInjectionTest+Dude", "members/Abra.Test.RudimentaryInjectionTest+Dude", true, "Abra.Test.RudimentaryInjectionTest+Dude")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            Birthday = resolver.RequestBinding("@bar/System.DateTime", "Birthday");
            ctorParameterBindings[0] = resolver.RequestBinding("System.Collections.Generic.IList`1<System.String>", "Abra.Test.RudimentaryInjectionTest.Dude..ctor");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            injectDependencies.UnionWith(ctorParameterBindings);
            propDependencies.Add(Birthday);
        }

        public override object Get()
        {
            var obj = new Abra.Test.RudimentaryInjectionTest.Dude(
                (System.Collections.Generic.IList<System.String>) ctorParameterBindings[0].Get() );
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            var toInject = (Abra.Test.RudimentaryInjectionTest.Dude) obj;
            toInject.Birthday = (System.DateTime) Birthday.Get();
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.RudimentaryInjectionTest.DerivedInjectable"/>.
    /// </summary>
    /// <remarks>
    /// RudimentaryInjectionTest.DerivedInjectable is an entry point binding.
    /// </remarks>
    public class RudimentaryInjectionTest_DerivedInjectable_CompiledBinding : Binding
    {
        private Binding baseTypeBinding;
        // Constructor bindings
        private Binding[] ctorParameterBindings = new Binding[1];

        public RudimentaryInjectionTest_DerivedInjectable_CompiledBinding()
            : base("Abra.Test.RudimentaryInjectionTest+DerivedInjectable", "members/Abra.Test.RudimentaryInjectionTest+DerivedInjectable", false, "Abra.Test.RudimentaryInjectionTest+DerivedInjectable")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            ctorParameterBindings[0] = resolver.RequestBinding("System.String", "Abra.Test.RudimentaryInjectionTest.DerivedInjectable..ctor");
            baseTypeBinding = resolver.RequestBinding("Abra.Test.RudimentaryInjectionTest+BaseInjectable", this, false);
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            injectDependencies.UnionWith(ctorParameterBindings);
            propDependencies.Add(baseTypeBinding);
        }

        public override object Get()
        {
            var obj = new Abra.Test.RudimentaryInjectionTest.DerivedInjectable(
                (System.String) ctorParameterBindings[0].Get() );
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            baseTypeBinding.InjectProperties(obj);
        }
    }
}

namespace Abra.Test
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    /// <summary>
    /// Represents a binding to an object of type <see cref="Abra.Test.RudimentaryInjectionTest.BaseInjectable"/>.
    /// </summary>
    public class RudimentaryInjectionTest_BaseInjectable_CompiledBinding : Binding
    {
        // Property bindings
        private Binding TheDude;

        public RudimentaryInjectionTest_BaseInjectable_CompiledBinding()
            : base("Abra.Test.RudimentaryInjectionTest+BaseInjectable", "members/Abra.Test.RudimentaryInjectionTest+BaseInjectable", false, "Abra.Test.RudimentaryInjectionTest+BaseInjectable")
        {
        }

        public override void Resolve(Resolver resolver)
        {
            TheDude = resolver.RequestBinding("Abra.Test.RudimentaryInjectionTest+Dude", "TheDude");
        }

        public override void GetDependencies(ISet<Binding> injectDependencies, ISet<Binding> propDependencies)
        {
            propDependencies.Add(TheDude);
        }

        public override object Get()
        {
            var obj = new Abra.Test.RudimentaryInjectionTest.BaseInjectable();
            InjectProperties(obj);
            return obj;
        }

        public override void InjectProperties(object obj)
        {
            var toInject = (Abra.Test.RudimentaryInjectionTest.BaseInjectable) obj;
            toInject.TheDude = (Abra.Test.RudimentaryInjectionTest.Dude) TheDude.Get();
        }
    }
}

namespace System
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    public class String_CompiledLazyBinding : Binding
    {
        private readonly string lazyKey;
        private Binding delegateBinding;

        public String_CompiledLazyBinding(string key, object requiredBy, string lazyKey)
            : base(key, null, false, requiredBy)
        {
            this.lazyKey = lazyKey;
        }

        public override void Resolve(Resolver resolver)
        {
            delegateBinding = resolver.RequestBinding(lazyKey, RequiredBy);
        }

        public override object Get()
        {
            return new global::System.Lazy<System.String>(() => (System.String) delegateBinding.Get());
        }

        public override void InjectProperties(object obj)
        {
            throw new NotSupportedException("Lazy bindings do not support property injection.");
        }
    }
}

namespace System
{
    using Binding = global::Abra.Internal.Binding;
    using Resolver = global::Abra.Internal.Resolver;

    public class String_CompiledProviderBinding : Binding, global::Abra.IProvider<System.String>
    {
        private readonly string providerKey;
        private readonly bool mustBeInjectable;
        private Binding delegateBinding;

        public String_CompiledProviderBinding(string key, object requiredBy, bool mustBeInjectable, string providerKey)
            : base(key, null, false, requiredBy)
        {
            this.providerKey = providerKey;
            this.mustBeInjectable = mustBeInjectable;
        }

        public override void Resolve(Resolver resolver)
        {
            delegateBinding = resolver.RequestBinding(providerKey, RequiredBy, mustBeInjectable);
        }

        System.String global::Abra.IProvider<System.String>.Get()
        {
            return (System.String) delegateBinding.Get();
        }

        public override object Get()
        {
            return this;
        }

        public override void InjectProperties(object obj)
        {
            throw new NotSupportedException("Provider bindings do not support property injection.");
        }
    }
}
